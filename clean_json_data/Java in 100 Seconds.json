[
    {
        "video_name": "Java in 100 Seconds",
        "text": " Java, a high-level multi-paradigm programming language famous for its ability to compile",
        "start": "0.00",
        "end": "5.12"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " to platform-independent bytecode.",
        "start": "5.12",
        "end": "7.42"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " It was designed by James Gosling in 1990 at Sun Microsystems.",
        "start": "7.42",
        "end": "11.68"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " One of its first demonstrations was the Star 7 PDA, which gave birth to the Java mascot,",
        "start": "11.68",
        "end": "16.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Duke.",
        "start": "16.84",
        "end": "17.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Today, it's one of the world's most popular programming languages.",
        "start": "17.84",
        "end": "20.24"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " It powers enterprise web apps with Spring Framework, big data pipelines with Hadoop,",
        "start": "20.24",
        "end": "24.52"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " mobile apps on Android, and even things like the controller for NASA's Maestro Mars rover.",
        "start": "24.52",
        "end": "29.52"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " What made Java innovative is that instead of compiling to machine code, like C or C++,",
        "start": "29.52",
        "end": "34.56"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " it compiles to bytecode that can run on any operating system without recompiling, which",
        "start": "34.56",
        "end": "39.16"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " is made possible by executing the code with the Java Virtual Machine or JVM.",
        "start": "39.16",
        "end": "44.04"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " It's both a compiled and interpreted language at the same time.",
        "start": "44.04",
        "end": "47.16"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " The computer just needs to have the Java runtime environment, or JRE, installed.",
        "start": "47.16",
        "end": "51.68"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " And most of them do.",
        "start": "51.68",
        "end": "52.68"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " For developers, this means write once, run anywhere.",
        "start": "52.68",
        "end": "55.28"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " It's a strongly typed language with a curly brace syntax similar to the C family.",
        "start": "55.56",
        "end": "59.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " However, it provides more high level features like garbage collection, runtime type checking,",
        "start": "59.84",
        "end": "65.00"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " and reflection.",
        "start": "65.00",
        "end": "66.00"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " To get started, install the Java development kit, or JDK, then create a file ending in",
        "start": "66.00",
        "end": "70.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " .java.",
        "start": "70.84",
        "end": "71.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Every Java program starts with a class name, which should also match the file name.",
        "start": "71.84",
        "end": "75.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " The class is required to have a main method.",
        "start": "75.84",
        "end": "78.28"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " This is where your code will start executing.",
        "start": "78.28",
        "end": "80.64"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " The method defines a variable by starting with a type, followed by a name and value.",
        "start": "80.64",
        "end": "85.48"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " We can then print it to the standard output using the built-in system class.",
        "start": "85.48",
        "end": "89.28"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Now because we're inside of a class, we define functions as methods on this class.",
        "start": "89.28",
        "end": "93.56"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " The public keyword means that it can be used outside of this class, and static means that",
        "start": "93.56",
        "end": "97.64"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " it's a member of the class itself as opposed to an instance of the class.",
        "start": "97.64",
        "end": "101.56"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " We then provide a type and name, and return a value from it.",
        "start": "101.56",
        "end": "104.92"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " You can define your own custom classes, which are blueprints for objects, then add attributes",
        "start": "104.92",
        "end": "109.44"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " and methods to them.",
        "start": "109.44",
        "end": "110.76"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Use the new keyword to instantiate an object from the class.",
        "start": "110.76",
        "end": "113.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " It feels very object-oriented, but has evolved to support functional patterns like anonymous",
        "start": "113.84",
        "end": "118.48"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " lambda methods.",
        "start": "118.48",
        "end": "119.52"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " When your program is finished, use the compiler to generate a .class file, which contains the",
        "start": "119.52",
        "end": "124.20"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " bytecode.",
        "start": "124.20",
        "end": "125.20"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Now use the Java command to tell the JVM to interpret and run that file.",
        "start": "125.20",
        "end": "129.44"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Congratulations, you just built an enterprise-grade application.",
        "start": "129.44",
        "end": "132.68"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " This has been Java in 100 seconds.",
        "start": "132.68",
        "end": "134.84"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Hit subscribe for more short videos like this, and if we somehow get to 100,000 likes on",
        "start": "134.84",
        "end": "139.04"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " this video, I'll do a full Java tutorial.",
        "start": "139.04",
        "end": "141.40"
    },
    {
        "video_name": "Java in 100 Seconds",
        "text": " Thanks for watching, and I will see you in the next one.",
        "start": "141.40",
        "end": "144.00"
    }
]