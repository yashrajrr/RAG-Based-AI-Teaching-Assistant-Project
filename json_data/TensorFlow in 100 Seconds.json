{
    "text": " TensorFlow, an open-source machine learning framework famous for powering deep neural networks with high-level code. It was developed by the Google Brain team and first released in 2015. It's most commonly used with Python, but can run in other languages like JavaScript, C++, and Java. At its core, it's just a library for programming with linear algebra and statistics. As you know, the word tensor describes a multilinear relationship between sets of algebraic objects within a vector space, a.k.a. a multi-dimensional array. What makes it special is its collection of APIs for data processing, visualization, model evaluation, and deployment that make deep learning accessible to the average developer. It's extremely portable and is able to run on tiny mobile CPUs or microcontrollers with TensorFlow Lite, can run in the browser with TensorFlow.js, while the core library can scale up to multiple GPUs, or run on tensor processing units, ships engineered specifically to run TensorFlow at a massive scale. It's used in medicine for object detection in MRI images, by Twitter to sort your timeline by tweet relevance, by Spotify to recommend music, by PayPal for fraud detection, in addition to many other applications like self-driving cars, natural language processing, and so on. To build your own neural network right now, create a Python file and install TensorFlow. Next, we'll need some data, like Fash and MNIST, which we can automatically import. The goal is to train a model that can predict the clothing type of each image. TensorFlow has a subclassing API for expert users, but also integrates with the beginner-friendly Keras library, which has a sequential API that can easily build neural networks layer by layer. We start with a flattened layer that takes the 28 by 28 pixel image as an input and converts it into a one-dimensional array. This input layer is then fed into a dense layer with 128 fully connected neurons or nodes. You can think of each node like its own linear regression. As each data point flows through it, it'll try to guess the output and gradually update a mapping of weights to determine the importance of a given variable. In this case, it uses a rectified linear activation function that will output the input if a certain threshold is met, otherwise it will just output zero. And the behavior of this layer can be customized by tuning its hyperparameters. Finally, we have our output layer, which is also dense, but is limited to 10 nodes, which corresponds to the total number of clothing types in the dataset. Now we can compile the model and tell it to optimize a certain loss function, like sparse categorical cross entropy. As we train the model for multiple epics, its accuracy should gradually improve. The end result is a model that makes a prediction with the likelihood that an image is a certain type of clothing. Congratulations, you just built a neural network. This has been TensorFlow in 100 seconds. Hit the like button if you want to see more short videos like this. Thanks for watching, and I will see you in the next one.",
    "segments": [
        {
            "id": 0,
            "seek": 0,
            "start": 0.0,
            "end": 6.62,
            "text": " TensorFlow, an open-source machine learning framework famous for powering deep neural networks with high-level code.",
            "tokens": [
                50364,
                37624,
                11,
                364,
                1269,
                12,
                41676,
                3479,
                2539,
                8388,
                4618,
                337,
                1347,
                278,
                2452,
                18161,
                9590,
                365,
                1090,
                12,
                12418,
                3089,
                13,
                50695
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 1,
            "seek": 0,
            "start": 6.62,
            "end": 10.52,
            "text": " It was developed by the Google Brain team and first released in 2015.",
            "tokens": [
                50695,
                467,
                390,
                4743,
                538,
                264,
                3329,
                29783,
                1469,
                293,
                700,
                4736,
                294,
                7546,
                13,
                50890
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 2,
            "seek": 0,
            "start": 10.52,
            "end": 16.2,
            "text": " It's most commonly used with Python, but can run in other languages like JavaScript, C++, and Java.",
            "tokens": [
                50890,
                467,
                311,
                881,
                12719,
                1143,
                365,
                15329,
                11,
                457,
                393,
                1190,
                294,
                661,
                8650,
                411,
                15778,
                11,
                383,
                25472,
                11,
                293,
                10745,
                13,
                51174
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 3,
            "seek": 0,
            "start": 16.2,
            "end": 20.54,
            "text": " At its core, it's just a library for programming with linear algebra and statistics.",
            "tokens": [
                51174,
                1711,
                1080,
                4965,
                11,
                309,
                311,
                445,
                257,
                6405,
                337,
                9410,
                365,
                8213,
                21989,
                293,
                12523,
                13,
                51391
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 4,
            "seek": 0,
            "start": 20.54,
            "end": 26.26,
            "text": " As you know, the word tensor describes a multilinear relationship between sets of algebraic objects within a vector space,",
            "tokens": [
                51391,
                1018,
                291,
                458,
                11,
                264,
                1349,
                40863,
                15626,
                257,
                2120,
                388,
                533,
                289,
                2480,
                1296,
                6352,
                295,
                21989,
                299,
                6565,
                1951,
                257,
                8062,
                1901,
                11,
                51677
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 5,
            "seek": 0,
            "start": 26.26,
            "end": 28.400000000000002,
            "text": " a.k.a. a multi-dimensional array.",
            "tokens": [
                51677,
                257,
                13,
                74,
                13,
                64,
                13,
                257,
                4825,
                12,
                18759,
                10225,
                13,
                51784
            ],
            "temperature": 0.0,
            "avg_logprob": -0.22093621201402558,
            "compression_ratio": 1.5393586005830904,
            "no_speech_prob": 0.03139358386397362
        },
        {
            "id": 6,
            "seek": 2840,
            "start": 28.5,
            "end": 35.3,
            "text": " What makes it special is its collection of APIs for data processing, visualization, model evaluation, and deployment",
            "tokens": [
                50369,
                708,
                1669,
                309,
                2121,
                307,
                1080,
                5765,
                295,
                21445,
                337,
                1412,
                9007,
                11,
                25801,
                11,
                2316,
                13344,
                11,
                293,
                19317,
                50709
            ],
            "temperature": 0.0,
            "avg_logprob": -0.17152139572870165,
            "compression_ratio": 1.6563573883161513,
            "no_speech_prob": 0.004873094614595175
        },
        {
            "id": 7,
            "seek": 2840,
            "start": 35.3,
            "end": 38.4,
            "text": " that make deep learning accessible to the average developer.",
            "tokens": [
                50709,
                300,
                652,
                2452,
                2539,
                9515,
                281,
                264,
                4274,
                10754,
                13,
                50864
            ],
            "temperature": 0.0,
            "avg_logprob": -0.17152139572870165,
            "compression_ratio": 1.6563573883161513,
            "no_speech_prob": 0.004873094614595175
        },
        {
            "id": 8,
            "seek": 2840,
            "start": 38.4,
            "end": 44.14,
            "text": " It's extremely portable and is able to run on tiny mobile CPUs or microcontrollers with TensorFlow Lite,",
            "tokens": [
                50864,
                467,
                311,
                4664,
                21800,
                293,
                307,
                1075,
                281,
                1190,
                322,
                5870,
                6013,
                13199,
                82,
                420,
                4532,
                9000,
                3970,
                433,
                365,
                37624,
                32986,
                11,
                51151
            ],
            "temperature": 0.0,
            "avg_logprob": -0.17152139572870165,
            "compression_ratio": 1.6563573883161513,
            "no_speech_prob": 0.004873094614595175
        },
        {
            "id": 9,
            "seek": 2840,
            "start": 44.14,
            "end": 49.36,
            "text": " can run in the browser with TensorFlow.js, while the core library can scale up to multiple GPUs,",
            "tokens": [
                51151,
                393,
                1190,
                294,
                264,
                11185,
                365,
                37624,
                13,
                25530,
                11,
                1339,
                264,
                4965,
                6405,
                393,
                4373,
                493,
                281,
                3866,
                18407,
                82,
                11,
                51412
            ],
            "temperature": 0.0,
            "avg_logprob": -0.17152139572870165,
            "compression_ratio": 1.6563573883161513,
            "no_speech_prob": 0.004873094614595175
        },
        {
            "id": 10,
            "seek": 2840,
            "start": 49.36,
            "end": 54.86,
            "text": " or run on tensor processing units, ships engineered specifically to run TensorFlow at a massive scale.",
            "tokens": [
                51412,
                420,
                1190,
                322,
                40863,
                9007,
                6815,
                11,
                11434,
                38648,
                4682,
                281,
                1190,
                37624,
                412,
                257,
                5994,
                4373,
                13,
                51687
            ],
            "temperature": 0.0,
            "avg_logprob": -0.17152139572870165,
            "compression_ratio": 1.6563573883161513,
            "no_speech_prob": 0.004873094614595175
        },
        {
            "id": 11,
            "seek": 5486,
            "start": 54.86,
            "end": 60.9,
            "text": " It's used in medicine for object detection in MRI images, by Twitter to sort your timeline by tweet relevance,",
            "tokens": [
                50364,
                467,
                311,
                1143,
                294,
                7195,
                337,
                2657,
                17784,
                294,
                32812,
                5267,
                11,
                538,
                5794,
                281,
                1333,
                428,
                12933,
                538,
                15258,
                32684,
                11,
                50666
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 12,
            "seek": 5486,
            "start": 60.9,
            "end": 66.44,
            "text": " by Spotify to recommend music, by PayPal for fraud detection, in addition to many other applications like",
            "tokens": [
                50666,
                538,
                29036,
                281,
                2748,
                1318,
                11,
                538,
                39906,
                337,
                14560,
                17784,
                11,
                294,
                4500,
                281,
                867,
                661,
                5821,
                411,
                50943
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 13,
            "seek": 5486,
            "start": 66.44,
            "end": 69.53999999999999,
            "text": " self-driving cars, natural language processing, and so on.",
            "tokens": [
                50943,
                2698,
                12,
                47094,
                5163,
                11,
                3303,
                2856,
                9007,
                11,
                293,
                370,
                322,
                13,
                51098
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 14,
            "seek": 5486,
            "start": 69.53999999999999,
            "end": 73.82,
            "text": " To build your own neural network right now, create a Python file and install TensorFlow.",
            "tokens": [
                51098,
                1407,
                1322,
                428,
                1065,
                18161,
                3209,
                558,
                586,
                11,
                1884,
                257,
                15329,
                3991,
                293,
                3625,
                37624,
                13,
                51312
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 15,
            "seek": 5486,
            "start": 73.82,
            "end": 77.82,
            "text": " Next, we'll need some data, like Fash and MNIST, which we can automatically import.",
            "tokens": [
                51312,
                3087,
                11,
                321,
                603,
                643,
                512,
                1412,
                11,
                411,
                479,
                1299,
                293,
                376,
                45,
                19756,
                11,
                597,
                321,
                393,
                6772,
                974,
                13,
                51512
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 16,
            "seek": 5486,
            "start": 77.82,
            "end": 81.12,
            "text": " The goal is to train a model that can predict the clothing type of each image.",
            "tokens": [
                51512,
                440,
                3387,
                307,
                281,
                3847,
                257,
                2316,
                300,
                393,
                6069,
                264,
                11502,
                2010,
                295,
                1184,
                3256,
                13,
                51677
            ],
            "temperature": 0.0,
            "avg_logprob": -0.13300097373224073,
            "compression_ratio": 1.5825825825825826,
            "no_speech_prob": 0.015636427327990532
        },
        {
            "id": 17,
            "seek": 8112,
            "start": 81.12,
            "end": 86.16000000000001,
            "text": " TensorFlow has a subclassing API for expert users, but also integrates with the beginner-friendly",
            "tokens": [
                50364,
                37624,
                575,
                257,
                1422,
                11665,
                278,
                9362,
                337,
                5844,
                5022,
                11,
                457,
                611,
                3572,
                1024,
                365,
                264,
                22080,
                12,
                22864,
                50616
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1541004180908203,
            "compression_ratio": 1.5844594594594594,
            "no_speech_prob": 0.00251496909186244
        },
        {
            "id": 18,
            "seek": 8112,
            "start": 86.16000000000001,
            "end": 91.46000000000001,
            "text": " Keras library, which has a sequential API that can easily build neural networks layer by layer.",
            "tokens": [
                50616,
                591,
                6985,
                6405,
                11,
                597,
                575,
                257,
                42881,
                9362,
                300,
                393,
                3612,
                1322,
                18161,
                9590,
                4583,
                538,
                4583,
                13,
                50881
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1541004180908203,
            "compression_ratio": 1.5844594594594594,
            "no_speech_prob": 0.00251496909186244
        },
        {
            "id": 19,
            "seek": 8112,
            "start": 91.46000000000001,
            "end": 98.0,
            "text": " We start with a flattened layer that takes the 28 by 28 pixel image as an input and converts it into a one-dimensional array.",
            "tokens": [
                50881,
                492,
                722,
                365,
                257,
                24183,
                292,
                4583,
                300,
                2516,
                264,
                7562,
                538,
                7562,
                19261,
                3256,
                382,
                364,
                4846,
                293,
                38874,
                309,
                666,
                257,
                472,
                12,
                18759,
                10225,
                13,
                51208
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1541004180908203,
            "compression_ratio": 1.5844594594594594,
            "no_speech_prob": 0.00251496909186244
        },
        {
            "id": 20,
            "seek": 8112,
            "start": 98.0,
            "end": 103.60000000000001,
            "text": " This input layer is then fed into a dense layer with 128 fully connected neurons or nodes.",
            "tokens": [
                51208,
                639,
                4846,
                4583,
                307,
                550,
                4636,
                666,
                257,
                18011,
                4583,
                365,
                29810,
                4498,
                4582,
                22027,
                420,
                13891,
                13,
                51488
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1541004180908203,
            "compression_ratio": 1.5844594594594594,
            "no_speech_prob": 0.00251496909186244
        },
        {
            "id": 21,
            "seek": 8112,
            "start": 103.60000000000001,
            "end": 106.28,
            "text": " You can think of each node like its own linear regression.",
            "tokens": [
                51488,
                509,
                393,
                519,
                295,
                1184,
                9984,
                411,
                1080,
                1065,
                8213,
                24590,
                13,
                51622
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1541004180908203,
            "compression_ratio": 1.5844594594594594,
            "no_speech_prob": 0.00251496909186244
        },
        {
            "id": 22,
            "seek": 10628,
            "start": 106.28,
            "end": 111.24,
            "text": " As each data point flows through it, it'll try to guess the output and gradually update a mapping of weights",
            "tokens": [
                50364,
                1018,
                1184,
                1412,
                935,
                12867,
                807,
                309,
                11,
                309,
                603,
                853,
                281,
                2041,
                264,
                5598,
                293,
                13145,
                5623,
                257,
                18350,
                295,
                17443,
                50612
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 23,
            "seek": 10628,
            "start": 111.24,
            "end": 113.44,
            "text": " to determine the importance of a given variable.",
            "tokens": [
                50612,
                281,
                6997,
                264,
                7379,
                295,
                257,
                2212,
                7006,
                13,
                50722
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 24,
            "seek": 10628,
            "start": 113.44,
            "end": 119.54,
            "text": " In this case, it uses a rectified linear activation function that will output the input if a certain threshold is met,",
            "tokens": [
                50722,
                682,
                341,
                1389,
                11,
                309,
                4960,
                257,
                11048,
                2587,
                8213,
                24433,
                2445,
                300,
                486,
                5598,
                264,
                4846,
                498,
                257,
                1629,
                14678,
                307,
                1131,
                11,
                51027
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 25,
            "seek": 10628,
            "start": 119.54,
            "end": 121.34,
            "text": " otherwise it will just output zero.",
            "tokens": [
                51027,
                5911,
                309,
                486,
                445,
                5598,
                4018,
                13,
                51117
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 26,
            "seek": 10628,
            "start": 121.34,
            "end": 125.18,
            "text": " And the behavior of this layer can be customized by tuning its hyperparameters.",
            "tokens": [
                51117,
                400,
                264,
                5223,
                295,
                341,
                4583,
                393,
                312,
                30581,
                538,
                15164,
                1080,
                9848,
                2181,
                335,
                6202,
                13,
                51309
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 27,
            "seek": 10628,
            "start": 125.18,
            "end": 129.44,
            "text": " Finally, we have our output layer, which is also dense, but is limited to 10 nodes,",
            "tokens": [
                51309,
                6288,
                11,
                321,
                362,
                527,
                5598,
                4583,
                11,
                597,
                307,
                611,
                18011,
                11,
                457,
                307,
                5567,
                281,
                1266,
                13891,
                11,
                51522
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 28,
            "seek": 10628,
            "start": 129.44,
            "end": 132.64,
            "text": " which corresponds to the total number of clothing types in the dataset.",
            "tokens": [
                51522,
                597,
                23249,
                281,
                264,
                3217,
                1230,
                295,
                11502,
                3467,
                294,
                264,
                28872,
                13,
                51682
            ],
            "temperature": 0.0,
            "avg_logprob": -0.12429676204919815,
            "compression_ratio": 1.6758409785932722,
            "no_speech_prob": 0.02434065379202366
        },
        {
            "id": 29,
            "seek": 13264,
            "start": 132.64,
            "end": 138.7,
            "text": " Now we can compile the model and tell it to optimize a certain loss function, like sparse categorical cross entropy.",
            "tokens": [
                50364,
                823,
                321,
                393,
                31413,
                264,
                2316,
                293,
                980,
                309,
                281,
                19719,
                257,
                1629,
                4470,
                2445,
                11,
                411,
                637,
                11668,
                19250,
                804,
                3278,
                30867,
                13,
                50667
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 30,
            "seek": 13264,
            "start": 138.7,
            "end": 142.79999999999998,
            "text": " As we train the model for multiple epics, its accuracy should gradually improve.",
            "tokens": [
                50667,
                1018,
                321,
                3847,
                264,
                2316,
                337,
                3866,
                2388,
                1167,
                11,
                1080,
                14170,
                820,
                13145,
                3470,
                13,
                50872
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 31,
            "seek": 13264,
            "start": 142.79999999999998,
            "end": 147.89999999999998,
            "text": " The end result is a model that makes a prediction with the likelihood that an image is a certain type of clothing.",
            "tokens": [
                50872,
                440,
                917,
                1874,
                307,
                257,
                2316,
                300,
                1669,
                257,
                17630,
                365,
                264,
                22119,
                300,
                364,
                3256,
                307,
                257,
                1629,
                2010,
                295,
                11502,
                13,
                51127
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 32,
            "seek": 13264,
            "start": 147.89999999999998,
            "end": 150.5,
            "text": " Congratulations, you just built a neural network.",
            "tokens": [
                51127,
                9694,
                11,
                291,
                445,
                3094,
                257,
                18161,
                3209,
                13,
                51257
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 33,
            "seek": 13264,
            "start": 150.5,
            "end": 152.73999999999998,
            "text": " This has been TensorFlow in 100 seconds.",
            "tokens": [
                51257,
                639,
                575,
                668,
                37624,
                294,
                2319,
                3949,
                13,
                51369
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 34,
            "seek": 13264,
            "start": 152.73999999999998,
            "end": 155.14,
            "text": " Hit the like button if you want to see more short videos like this.",
            "tokens": [
                51369,
                9217,
                264,
                411,
                2960,
                498,
                291,
                528,
                281,
                536,
                544,
                2099,
                2145,
                411,
                341,
                13,
                51489
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        },
        {
            "id": 35,
            "seek": 13264,
            "start": 155.14,
            "end": 157.79999999999998,
            "text": " Thanks for watching, and I will see you in the next one.",
            "tokens": [
                51489,
                2561,
                337,
                1976,
                11,
                293,
                286,
                486,
                536,
                291,
                294,
                264,
                958,
                472,
                13,
                51622
            ],
            "temperature": 0.0,
            "avg_logprob": -0.1448329956300797,
            "compression_ratio": 1.6296296296296295,
            "no_speech_prob": 0.017358748242259026
        }
    ],
    "language": "en"
}